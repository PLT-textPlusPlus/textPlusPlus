type token =
  | SEMI
  | COLON
  | COMMA
  | ENDLINE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | TAG
  | HEADING
  | FONT
  | ALIGNMENT
  | VARIABLE of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | CONT
  | RETURN
  | BOOL
  | BOLD
  | ITALICS
  | UNDERLINE
  | LINE
  | BULLET
  | PAGEBREAK
  | RENDER
  | INDENT
  | DEFINE
  | DECLARE
  | NUMBER of (int)
  | FLOAT of (float)
  | STRING of (string)
  | STRLITERAL of (string)
  | CHAR of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLON *);
  259 (* COMMA *);
  260 (* ENDLINE *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LBRACKET *);
  266 (* RBRACKET *);
  267 (* TAG *);
  268 (* HEADING *);
  269 (* FONT *);
  270 (* ALIGNMENT *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* TIMES *);
  275 (* DIVIDE *);
  276 (* MODULO *);
  277 (* ASSIGN *);
  278 (* NOT *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LT *);
  282 (* LEQ *);
  283 (* GT *);
  284 (* GEQ *);
  285 (* TRUE *);
  286 (* FALSE *);
  287 (* AND *);
  288 (* OR *);
  289 (* IF *);
  290 (* ELSE *);
  291 (* ELIF *);
  292 (* FOR *);
  293 (* WHILE *);
  294 (* CONT *);
  295 (* RETURN *);
  296 (* BOOL *);
  297 (* BOLD *);
  298 (* ITALICS *);
  299 (* UNDERLINE *);
  300 (* LINE *);
  301 (* BULLET *);
  302 (* PAGEBREAK *);
  303 (* RENDER *);
  304 (* INDENT *);
  305 (* DEFINE *);
  306 (* DECLARE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  271 (* VARIABLE *);
  307 (* NUMBER *);
  308 (* FLOAT *);
  309 (* STRING *);
  310 (* STRLITERAL *);
  311 (* CHAR *);
  312 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\008\000\008\000\008\000\
\008\000\008\000\005\000\005\000\009\000\009\000\006\000\006\000\
\003\000\007\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\001\000\001\000\001\000\
\001\000\001\000\000\000\001\000\002\000\004\000\000\000\002\000\
\005\000\002\000\002\000\002\000\003\000\004\000\004\000\003\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\003\000\005\000\005\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\060\000\000\000\000\000\001\000\003\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\006\000\
\008\000\010\000\009\000\000\000\000\000\000\000\017\000\000\000\
\013\000\000\000\015\000\000\000\000\000\014\000\000\000\016\000\
\000\000\000\000\000\000\005\000\000\000\000\000\034\000\035\000\
\000\000\000\000\000\000\000\000\031\000\032\000\033\000\030\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\052\000\053\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\055\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\025\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\007\000\008\000\020\000\029\000\033\000\021\000\
\022\000\049\000\050\000\088\000\108\000\109\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\001\000\235\254\000\000\000\000\000\000\
\214\254\224\254\025\255\036\255\075\255\042\255\000\000\000\000\
\000\000\000\000\000\000\049\255\002\255\069\255\000\000\071\255\
\000\000\075\255\000\000\020\255\062\255\000\000\029\255\000\000\
\254\255\126\000\000\000\000\000\254\254\126\000\000\000\000\000\
\083\255\103\255\104\255\245\255\000\000\000\000\000\000\000\000\
\000\000\115\255\248\254\174\255\025\000\000\000\000\000\107\255\
\112\255\007\255\126\000\126\000\126\000\000\000\151\255\000\000\
\126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\126\000\126\000\000\000\000\000\000\000\
\000\000\060\000\087\000\126\000\126\000\197\255\182\000\117\255\
\220\255\000\000\094\255\094\255\007\255\007\255\007\255\217\000\
\217\000\255\254\255\254\255\254\255\254\066\255\201\000\000\000\
\000\000\165\000\182\000\114\255\118\255\114\000\126\000\114\000\
\000\000\000\000\126\000\088\255\079\255\000\000\182\000\114\000\
\126\000\000\000\119\255\114\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\123\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\255\
\000\000\245\000\000\000\144\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\143\255\000\000\005\255\000\000\
\000\000\000\000\117\001\149\001\021\001\053\001\085\001\009\002\
\019\002\181\001\191\001\223\001\233\001\153\255\100\000\000\000\
\000\000\000\000\006\255\000\000\147\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\255\000\000\
\154\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\132\000\000\000\000\000\000\000\223\255\138\000\
\000\000\038\000\222\255\044\000\000\000\000\000"

let yytablesize = 819
let yytable = "\052\000\
\006\000\053\000\054\000\058\000\055\000\029\000\056\000\001\000\
\058\000\063\000\029\000\058\000\056\000\011\000\065\000\066\000\
\067\000\068\000\069\000\059\000\082\000\083\000\059\000\012\000\
\086\000\087\000\089\000\009\000\010\000\013\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\036\000\014\000\036\000\036\000\057\000\
\036\000\106\000\107\000\023\000\036\000\057\000\024\000\078\000\
\079\000\025\000\036\000\036\000\036\000\036\000\036\000\078\000\
\079\000\036\000\036\000\036\000\036\000\036\000\036\000\026\000\
\031\000\036\000\036\000\030\000\117\000\027\000\010\000\121\000\
\119\000\065\000\066\000\067\000\068\000\069\000\087\000\059\000\
\070\000\071\000\072\000\073\000\074\000\075\000\065\000\066\000\
\067\000\068\000\069\000\036\000\036\000\070\000\071\000\072\000\
\073\000\074\000\075\000\060\000\061\000\076\000\077\000\067\000\
\068\000\069\000\015\000\084\000\085\000\111\000\064\000\114\000\
\115\000\120\000\078\000\079\000\124\000\016\000\017\000\018\000\
\011\000\019\000\065\000\066\000\067\000\068\000\069\000\078\000\
\079\000\070\000\071\000\072\000\073\000\074\000\075\000\012\000\
\028\000\076\000\077\000\116\000\056\000\118\000\078\000\079\000\
\057\000\048\000\090\000\048\000\048\000\122\000\048\000\028\000\
\032\000\125\000\048\000\028\000\123\000\000\000\065\000\066\000\
\067\000\068\000\069\000\078\000\079\000\070\000\071\000\072\000\
\073\000\074\000\075\000\080\000\000\000\076\000\077\000\048\000\
\048\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\110\000\000\000\076\000\077\000\000\000\078\000\
\079\000\000\000\000\000\000\000\065\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\112\000\000\000\076\000\077\000\000\000\078\000\079\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\062\000\034\000\076\000\077\000\000\000\078\000\079\000\051\000\
\000\000\000\000\034\000\000\000\035\000\036\000\000\000\000\000\
\037\000\000\000\038\000\005\000\000\000\000\000\000\000\000\000\
\000\000\039\000\040\000\038\000\078\000\079\000\000\000\000\000\
\000\000\000\000\039\000\040\000\000\000\034\000\041\000\035\000\
\081\000\042\000\043\000\037\000\044\000\000\000\000\000\045\000\
\046\000\047\000\048\000\000\000\000\000\000\000\038\000\000\000\
\045\000\046\000\047\000\048\000\000\000\039\000\040\000\000\000\
\000\000\041\000\000\000\000\000\042\000\043\000\000\000\044\000\
\034\000\104\000\035\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\045\000\046\000\047\000\048\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\040\000\000\000\034\000\041\000\035\000\105\000\042\000\
\043\000\037\000\044\000\000\000\049\000\000\000\049\000\049\000\
\000\000\049\000\000\000\000\000\038\000\049\000\045\000\046\000\
\047\000\048\000\000\000\039\000\040\000\000\000\034\000\041\000\
\035\000\000\000\042\000\043\000\037\000\044\000\000\000\000\000\
\000\000\000\000\034\000\049\000\000\000\000\000\000\000\038\000\
\051\000\045\000\046\000\047\000\048\000\000\000\039\000\040\000\
\000\000\000\000\041\000\038\000\000\000\042\000\043\000\000\000\
\044\000\000\000\039\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\046\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\113\000\000\000\
\045\000\046\000\047\000\048\000\065\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\000\000\000\000\076\000\077\000\065\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\076\000\077\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\078\000\079\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\076\000\
\065\000\066\000\067\000\068\000\069\000\000\000\078\000\079\000\
\000\000\072\000\073\000\074\000\075\000\050\000\000\000\050\000\
\050\000\000\000\050\000\000\000\000\000\000\000\050\000\000\000\
\000\000\078\000\079\000\000\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\078\000\079\000\050\000\050\000\039\000\000\000\039\000\
\039\000\000\000\039\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\000\000\000\000\039\000\039\000\040\000\000\000\040\000\
\040\000\000\000\040\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\041\000\000\000\041\000\
\041\000\000\000\041\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\037\000\000\000\037\000\
\037\000\000\000\037\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\000\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\037\000\037\000\038\000\000\000\038\000\
\038\000\000\000\038\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\000\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\044\000\000\000\044\000\
\044\000\000\000\044\000\000\000\000\000\000\000\044\000\045\000\
\000\000\045\000\045\000\000\000\045\000\000\000\000\000\000\000\
\045\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\000\000\000\000\044\000\044\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\045\000\045\000\046\000\
\000\000\046\000\046\000\000\000\046\000\000\000\000\000\000\000\
\046\000\047\000\000\000\047\000\047\000\000\000\047\000\000\000\
\000\000\000\000\047\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\046\000\046\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\047\000\
\047\000\042\000\000\000\042\000\042\000\000\000\042\000\000\000\
\000\000\000\000\042\000\043\000\000\000\043\000\043\000\000\000\
\043\000\000\000\000\000\000\000\043\000\000\000\000\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\042\000\043\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\043\000"

let yycheck = "\034\000\
\000\000\035\000\005\001\038\000\007\001\001\001\015\001\001\000\
\003\001\044\000\006\001\006\001\015\001\056\001\016\001\017\001\
\018\001\019\001\020\001\003\001\054\000\055\000\006\001\056\001\
\059\000\060\000\061\000\049\001\050\001\005\001\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\001\001\009\001\003\001\004\001\056\001\
\006\001\084\000\085\000\010\001\010\001\056\001\006\001\057\001\
\058\001\056\001\016\001\017\001\018\001\019\001\020\001\057\001\
\058\001\023\001\024\001\025\001\026\001\027\001\028\001\003\001\
\011\001\031\001\032\001\056\001\111\000\007\001\050\001\001\001\
\115\000\016\001\017\001\018\001\019\001\020\001\121\000\005\001\
\023\001\024\001\025\001\026\001\027\001\028\001\016\001\017\001\
\018\001\019\001\020\001\057\001\058\001\023\001\024\001\025\001\
\026\001\027\001\028\001\005\001\005\001\031\001\032\001\018\001\
\019\001\020\001\040\001\009\001\005\001\001\001\004\001\006\001\
\003\001\034\001\057\001\058\001\006\001\051\001\052\001\053\001\
\006\001\055\001\016\001\017\001\018\001\019\001\020\001\057\001\
\058\001\023\001\024\001\025\001\026\001\027\001\028\001\006\001\
\001\001\031\001\032\001\110\000\006\001\112\000\057\001\058\001\
\006\001\001\001\004\001\003\001\004\001\120\000\006\001\006\001\
\029\000\124\000\010\001\026\000\121\000\255\255\016\001\017\001\
\018\001\019\001\020\001\057\001\058\001\023\001\024\001\025\001\
\026\001\027\001\028\001\006\001\255\255\031\001\032\001\031\001\
\032\001\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\006\001\255\255\031\001\032\001\255\255\057\001\
\058\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\006\001\255\255\031\001\032\001\255\255\057\001\058\001\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\004\001\005\001\031\001\032\001\255\255\057\001\058\001\011\001\
\255\255\255\255\005\001\255\255\007\001\008\001\255\255\255\255\
\011\001\255\255\022\001\011\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\022\001\057\001\058\001\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\005\001\033\001\007\001\
\008\001\036\001\037\001\011\001\039\001\255\255\255\255\051\001\
\052\001\053\001\054\001\255\255\255\255\255\255\022\001\255\255\
\051\001\052\001\053\001\054\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\255\255\039\001\
\005\001\006\001\007\001\255\255\255\255\255\255\011\001\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\005\001\033\001\007\001\008\001\036\001\
\037\001\011\001\039\001\255\255\001\001\255\255\003\001\004\001\
\255\255\006\001\255\255\255\255\022\001\010\001\051\001\052\001\
\053\001\054\001\255\255\029\001\030\001\255\255\005\001\033\001\
\007\001\255\255\036\001\037\001\011\001\039\001\255\255\255\255\
\255\255\255\255\005\001\032\001\255\255\255\255\255\255\022\001\
\011\001\051\001\052\001\053\001\054\001\255\255\029\001\030\001\
\255\255\255\255\033\001\022\001\255\255\036\001\037\001\255\255\
\039\001\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\255\255\
\051\001\052\001\053\001\054\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\057\001\058\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\016\001\017\001\018\001\019\001\020\001\255\255\057\001\058\001\
\255\255\025\001\026\001\027\001\028\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\057\001\058\001\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\057\001\058\001\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\010\001\001\001\
\255\255\003\001\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\255\255\003\001\004\001\255\255\006\001\255\255\255\255\255\255\
\010\001\001\001\255\255\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\001\001\255\255\003\001\004\001\255\255\
\006\001\255\255\255\255\255\255\010\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001"

let yynames_const = "\
  SEMI\000\
  COLON\000\
  COMMA\000\
  ENDLINE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  TAG\000\
  HEADING\000\
  FONT\000\
  ALIGNMENT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  CONT\000\
  RETURN\000\
  BOOL\000\
  BOLD\000\
  ITALICS\000\
  UNDERLINE\000\
  LINE\000\
  BULLET\000\
  PAGEBREAK\000\
  RENDER\000\
  INDENT\000\
  DEFINE\000\
  DECLARE\000\
  EOF\000\
  "

let yynames_block = "\
  VARIABLE\000\
  NUMBER\000\
  FLOAT\000\
  STRING\000\
  STRLITERAL\000\
  CHAR\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    Obj.repr(
# 42 "parser.mly"
                   ( _1 )
# 489 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                 ( [], [] )
# 495 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declaration) in
    Obj.repr(
# 47 "parser.mly"
                                ( (_2 :: fst _1), snd _1 )
# 503 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_declaration) in
    Obj.repr(
# 48 "parser.mly"
                                 ( fst _1, (_2 :: snd _1) )
# 511 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'optional_formal_parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'var_declaration_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 53 "parser.mly"
     ( {  function_name = _3;
	      parameters= _5;
	      local_variables = List.rev _8;
	      code_block = List.rev _9; 
     } )
# 525 "parser.ml"
               : 'func_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 61 "parser.mly"
            ( Int )
# 532 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
            ( Bool )
# 538 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 63 "parser.mly"
            ( Float )
# 545 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
            ( Char )
# 552 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
            ( String )
# 559 "parser.ml"
               : 'type))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                  ( [] )
# 565 "parser.ml"
               : 'optional_formal_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameters_list) in
    Obj.repr(
# 70 "parser.mly"
                             ( List.rev _1 )
# 572 "parser.ml"
               : 'optional_formal_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
                              ( [(_1,_2)] )
# 580 "parser.ml"
               : 'formal_parameters_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_parameters_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                                         ( (_3,_4) :: _1 )
# 589 "parser.ml"
               : 'formal_parameters_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                     ( [] )
# 595 "parser.ml"
               : 'var_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declaration) in
    Obj.repr(
# 80 "parser.mly"
                                         ( _2 :: _1 )
# 603 "parser.ml"
               : 'var_declaration_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 84 "parser.mly"
                                    ( (_3) )
# 610 "parser.ml"
               : 'var_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                  ( _2 :: _1 )
# 618 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                 ( Expr _1 )
# 625 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                   ( Return Noexpr )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                        ( Return _2 )
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 95 "parser.mly"
                                ( Block(List.rev _3) )
# 645 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 96 "parser.mly"
                                ( Block(List.rev _3) )
# 652 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
                            ( Block(List.rev _2) )
# 659 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                            ( If(_3, _5, _7) )
# 668 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'optional_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'optional_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 678 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
                                  ( While(_3, _5) )
# 686 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                ( Noexpr )
# 692 "parser.ml"
               : 'optional_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                  ( _1 )
# 699 "parser.ml"
               : 'optional_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                                             ( Literal(_1) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
                             ( Number(_1))
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 111 "parser.mly"
                              ( Float(_1) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
                               ( String(_1))
# 727 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                           ( Boolean(true))
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                        ( Boolean(false))
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                         ( Var(_2) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                            ( Binop(_1, Add,   _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                            ( Binop(_1, Sub,   _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                            ( Binop(_1, Mult,  _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                            ( Binop(_1, Div,   _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                           ( Binop(_1, Mod,   _3) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                            ( Binop(_1, Equal, _3) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                            ( Binop(_1, Neq,   _3) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                            ( Binop(_1, Less,  _3) )
# 810 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                            ( Binop(_1, Leq,   _3) )
# 818 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                            ( Binop(_1, Greater, _3) )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                     ( Binop(_1, Geq,   _3) )
# 834 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                     ( Binop(_1, And,   _3) )
# 842 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                     ( Binop(_1, Or,    _3) )
# 850 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                             ( Unop(Not, _2) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                             ( Binop(_1, Decrement) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                             ( Binop(_1, Increment) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                             ( _2 )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                             ( Assign(_2, _4) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'option_args) in
    Obj.repr(
# 134 "parser.mly"
                                             ( Call(_2, _4) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
                            ( [] )
# 900 "parser.ml"
               : 'option_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 138 "parser.mly"
                            ( List.rev _1 )
# 907 "parser.ml"
               : 'option_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                            ( [_1] )
# 914 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                            ( _3 :: _1 )
# 922 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
