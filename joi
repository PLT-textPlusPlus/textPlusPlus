      | Assign(typ, var, e) as ex ->
          let lt = (match typ with
            Arraytype(t, _) -> t
          | _ -> typ
          ) in
          let rt = expr e
          and invalid_arr = invalid_arr_size typ e in
          if invalid_arr then raise (Failure ("Invalid length declaration"))
          else
          if rt == Void then raise (Failure("Must initialize variable with a value."))
        else
          ignore (check_assign lt rt (Failure ("illegal assignment " ^ string_of_typ typ ^ " = " ^ string_of_typ rt ^ " in " ^ string_of_expr ex)));
          check_var_decl var (Failure ("duplicate declaration of variable " ^ var));
          let _ =
            (match func.fname with
              | _ -> variables := StringMap.add var typ (!variables)
            )
          in rt
          
          
          
          
let check_assign lvaluet rvaluet err =
    if lvaluet = rvaluet then rvaluet
    else if lvaluet = Num && rvaluet = AnyType then lvaluet
    else if lvaluet = Int && rvaluet = AnyType then lvaluet
    else if lvaluet = String && rvaluet = AnyType then lvaluet
    else if lvaluet = Bool && rvaluet = AnyType then lvaluet
    else if lvaluet = Num && rvaluet = NumberType then lvaluet
    else if lvaluet = Int && rvaluet = NumberType then lvaluet
    else raise err
  in



    (* Helper: Returns type of identifier *)
    let type_of_identifier name =
      try StringMap.find name (!variables)
      with Not_found -> raise (Failure ("undeclared identifier " ^ name))
    in

    (* Helper: Check if variable is already declared *)
    let check_var_decl var_name err =
      if StringMap.mem var_name (!variables)
      then raise err
    in
